# This file was generated from 'build.rules' using namgen; do not edit!

# the directory with the top-level makefile
TOP_DIR := {{TOP_DIR}}

# all generated .d dependency files in this directory
DEPS_{{THIS_DIR}} =

# when calling make in *this* directory goto top-level makefile
# this needs to be the first target
ifneq ($(TOP_DIR), $(shell basename $$PWD))
{{THIS_DIR}}_parent:
	make -C $(TOP_DIR)
endif

# clean target for this sub-dir
# FIXME: should probably recurse into any sub-dirs
{{THIS_DIR}}_clean:
	(cd {{PATH_FROM_TOP}} && rm -rf $(FILES_TO_CLEAN))
{{#HAS_VERBATIM}}
# makefile fragment copied verbatim from build.rules
{{VERBATIM}}{{/HAS_VERBATIM}}{{#PROGRAM_RULES}}
# *** program: {{TARGET_NAME}} ***
{{>src_depends}}
{{PATH_FROM_TOP}}/{{TARGET_NAME}}$(EXE_EXT): LF_TGT := {{TARGET_SPECIFIC_LF}}
EXTRA_OBJ_{{THIS_DIR}}_{{TARGET_NAME}} := {{EXTRA_OBJ_EXPR}}

# add this program to the global 'make build' goals
TARGETS_TO_BUILD += {{PATH_FROM_TOP}}/{{TARGET_NAME}}$(EXE_EXT)
# link the program from the object files
{{PATH_FROM_TOP}}/{{TARGET_NAME}}$(EXE_EXT): $(OBJ_{{THIS_DIR}}_{{TARGET_NAME}}) $(EXTRA_OBJ_{{THIS_DIR}}_{{TARGET_NAME}})
	@$(LINK_CXX) -o $@ $(BIN_LINK_FLAGS) $(LF_TGT) $^

# dependencies of this program
# this statement causes linking with the requested libaries
# defaults to using the shared-lib (if available)
{{#DEPENDS}}{{PATH_FROM_TOP}}/{{TARGET_NAME}}$(EXE_EXT): {{DEPENDENCY}}.la
{{/DEPENDS}}

# should this program be installed into DESTDIR?
{{#IF_INSTALL}}$(DESTDIR)/{{DEST_SUB}}{{TARGET_NAME}}$(EXE_EXT): {{PATH_FROM_TOP}}/{{TARGET_NAME}}$(EXE_EXT)
	install -t $(DESTDIR)/{{DEST_SUB}} {{PATH_FROM_TOP}}/.libs/{{TARGET_NAME}}

# add this program to the global 'make install' goals
TARGETS_TO_INSTALL += $(DESTDIR)/{{DEST_SUB}}{{TARGET_NAME}}$(EXE_EXT)
{{/IF_INSTALL}}{{/PROGRAM_RULES}}
{{#LIBRARY_RULES}}
# *** library: {{TARGET_NAME}} ***
{{>src_depends}}
{{PATH_FROM_TOP}}/{{TARGET_NAME}}.la: LF_TGT := {{TARGET_SPECIFIC_LF}}
EXTRA_OBJ_{{THIS_DIR}}_{{TARGET_NAME}} := {{EXTRA_OBJ_EXPR}}
EXTRA_OBJ_LO_{{THIS_DIR}}_{{TARGET_NAME}} := $(EXTRA_OBJ_{{THIS_DIR}}_{{TARGET_NAME}}:%.o=%.lo)

# this will contain --rpath ... (which determines if the shared version is built)
# 'skip-shared = true' disables shared building on a per-library base
# shared libs can also be deactivated globally
LINK_FLAGS_{{TARGET_NAME}} := {{BUILD_THIS_AS_SHARED}}

TARGETS_TO_BUILD += {{PATH_FROM_TOP}}/{{TARGET_NAME}}.la
{{PATH_FROM_TOP}}/{{TARGET_NAME}}.la: $(OBJ_LO_{{THIS_DIR}}_{{TARGET_NAME}}) $(EXTRA_OBJ_LO_{{THIS_DIR}}_{{TARGET_NAME}})
	@$(LINK_CXX) -o $@ $(LINK_FLAGS_{{TARGET_NAME}}) $(LF_TGT) $^

# dependencies
{{#DEPENDS}}{{PATH_FROM_TOP}}/{{TARGET_NAME}}.la: {{DEPENDENCY}}.la
{{/DEPENDS}}

# FIXME: handle .dll for WIN32, what about static libs? never installed?
{{#IF_INSTALL}}# install into DESTDIR
$(DESTDIR)/{{DEST_SUB}}{{TARGET_NAME}}.so.0: {{PATH_FROM_TOP}}/{{TARGET_NAME}}.la
	install -t $(DESTDIR)/{{DEST_SUB}} {{PATH_FROM_TOP}}/.libs/{{TARGET_NAME}}.so.0

TARGETS_TO_INSTALL += $(DESTDIR)/{{DEST_SUB}}{{TARGET_NAME}}.so.0
{{/IF_INSTALL}}{{/LIBRARY_RULES}}

# include all dependency files if not cleaning
ifneq "$(MAKECMDGOALS)" "clean"
-include $(DEPS_{{THIS_DIR}})
endif
