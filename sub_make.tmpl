# This file was generated from 'build.rules' using namgen; do not edit!

# the directory with the top-level makefile
TOP_DIR := {{TOP_DIR}}

# all generated .d dependency files in this directory
DEPS_{{THIS_DIR}} =

# when calling make in *this* directory goto top-level makefile
# this needs to be the first target
ifneq ($(TOP_DIR), $(shell basename $$PWD))
{{THIS_DIR}}_parent:
	make -C $(TOP_DIR)
endif

# clean target for this sub-dir
{{THIS_DIR}}_clean:
	(cd {{PATH_FROM_TOP}} && rm -rf $(FILES_TO_CLEAN) $({{THIS_DIR}}_TARGETS))
{{#HAS_VERBATIM}}
# makefile fragment copied verbatim from build.rules
{{VERBATIM}}{{/HAS_VERBATIM}}{{#PROGRAM_RULES}}
# *** program: {{TARGET_NAME}} ***
{{>src_depends}}
{{PATH_FROM_TOP}}/{{TARGET_NAME}}$(EXE_EXT): LF_TGT := {{TARGET_SPECIFIC_LF}}
EXTRA_OBJ_{{THIS_DIR}}_{{TARGET_NAME}} := {{EXTRA_OBJ_EXPR}}

# dependencies of this program
# this statement causes linking with the requested libaries
# defaults to using the shared-lib (if available)
{{#DEPENDS_SHARED}}{{THIS_DIR}}_{{TARGET_NAME}}_LIBS += {{DEPENDENCY}}.la
{{/DEPENDS_SHARED}}
{{PATH_FROM_TOP}}/.{{TARGET_NAME}}.dummy: $({{THIS_DIR}}_{{TARGET_NAME}}_LIBS)
	@if [ ! -e $@ ]; then touch $@; fi

{{#DEPENDS_STATIC}}{{THIS_DIR}}_{{TARGET_NAME}}_STATIC_LIBS += {{DEPENDENCY}}.la
{{/DEPENDS_STATIC}}

{{THIS_DIR}}_{{TARGET_NAME}}_ALL_LIBS = $({{THIS_DIR}}_{{TARGET_NAME}}_STATIC_LIBS) $({{THIS_DIR}}_{{TARGET_NAME}}_LIBS) 

# add this program to the global 'make build' goals
TARGETS_TO_BUILD += {{PATH_FROM_TOP}}/{{TARGET_NAME}}$(EXE_EXT)
{{THIS_DIR}}_TARGETS += {{TARGET_NAME}}$(EXE_EXT)
# link the program from the object files
{{PATH_FROM_TOP}}/{{TARGET_NAME}}$(EXE_EXT): {{PATH_FROM_TOP}}/.{{TARGET_NAME}}.dummy $({{THIS_DIR}}_{{TARGET_NAME}}_STATIC_LIBS) $(OBJ_{{THIS_DIR}}_{{TARGET_NAME}}) $(EXTRA_OBJ_{{THIS_DIR}}_{{TARGET_NAME}})
	@$(LINK_CXX) -o $@ $(OBJ_{{THIS_DIR}}_{{TARGET_NAME}}) $(EXTRA_OBJ_{{THIS_DIR}}_{{TARGET_NAME}}) $({{THIS_DIR}}_{{TARGET_NAME}}_ALL_LIBS) $(BIN_LINK_FLAGS) $(LDFLAGS) $(LF_TGT)

# should this program be installed into DESTDIR?
{{#IF_INSTALL}}$(DESTDIR)/{{DEST_SUB}}/{{TARGET_NAME}}$(EXE_EXT): {{PATH_FROM_TOP}}/{{TARGET_NAME}}$(EXE_EXT)
	$(INSTALL_CMD) $< $(DESTDIR)/{{DEST_SUB}}

# add this program to the 'install' goals for this directory
{{THIS_DIR}}_TARGETS_TO_INSTALL += $(DESTDIR)/{{DEST_SUB}}/{{TARGET_NAME}}$(EXE_EXT)

{{/IF_INSTALL}}{{/PROGRAM_RULES}}
{{#LIBRARY_RULES}}
# *** library: {{TARGET_NAME}} ***
{{>src_depends}}
{{PATH_FROM_TOP}}/{{TARGET_NAME}}.la: LF_TGT := {{TARGET_SPECIFIC_LF}} {{VERSION_SCHEMA}} {{VERSION_NUMBER}}
EXTRA_OBJ_{{THIS_DIR}}_{{TARGET_NAME}} := {{EXTRA_OBJ_EXPR}}
EXTRA_OBJ_LO_{{THIS_DIR}}_{{TARGET_NAME}} := $(EXTRA_OBJ_{{THIS_DIR}}_{{TARGET_NAME}}:%.o=%.lo)

LINK_FLAGS_{{TARGET_NAME}} := {{STATIC_OR_SHARED}}

# dependencies
{{#DEPENDS_SHARED}}{{THIS_DIR}}_{{TARGET_NAME}}_LIBS += {{DEPENDENCY}}.la
{{/DEPENDS_SHARED}}
{{PATH_FROM_TOP}}/.{{TARGET_NAME}}.dummy: $({{THIS_DIR}}_{{TARGET_NAME}}_LIBS)
	@if [ ! -e $@ ]; then touch $@; fi

{{#DEPENDS_STATIC}}{{THIS_DIR}}_{{TARGET_NAME}}_STATIC_LIBS += {{DEPENDENCY}}.la
{{/DEPENDS_STATIC}}

{{THIS_DIR}}_{{TARGET_NAME}}_ALL_LIBS = $({{THIS_DIR}}_{{TARGET_NAME}}_STATIC_LIBS) $({{THIS_DIR}}_{{TARGET_NAME}}_LIBS)

TARGETS_TO_BUILD += {{PATH_FROM_TOP}}/{{TARGET_NAME}}.la
{{THIS_DIR}}_TARGETS += {{TARGET_NAME}}.la
{{PATH_FROM_TOP}}/{{TARGET_NAME}}.la: {{PATH_FROM_TOP}}/.{{TARGET_NAME}}.dummy $({{THIS_DIR}}_{{TARGET_NAME}}_STATIC_LIBS) $(OBJ_LO_{{THIS_DIR}}_{{TARGET_NAME}}) $(EXTRA_OBJ_LO_{{THIS_DIR}}_{{TARGET_NAME}})
	@$(LINK_CXX) -o $@ $(OBJ_LO_{{THIS_DIR}}_{{TARGET_NAME}}) $(EXTRA_OBJ_LO_{{THIS_DIR}}_{{TARGET_NAME}}) $({{THIS_DIR}}_{{TARGET_NAME}}_ALL_LIBS) $(LINK_FLAGS_{{TARGET_NAME}}) $(LDFLAGS) $(LF_TGT)

{{#DEPENDS_STATIC}}{{PATH_FROM_TOP}}/{{TARGET_NAME}}.la: {{DEPENDENCY}}.la
{{/DEPENDS_STATIC}}

{{#IF_INSTALL}}# install into DESTDIR
$(DESTDIR)/{{DEST_SUB}}/{{TARGET_NAME}}.la: {{PATH_FROM_TOP}}/{{TARGET_NAME}}.la
	$(INSTALL_CMD) $< $(DESTDIR)/{{DEST_SUB}}

{{THIS_DIR}}_TARGETS_TO_INSTALL += $(DESTDIR)/{{DEST_SUB}}/{{TARGET_NAME}}.la
{{/IF_INSTALL}}{{/LIBRARY_RULES}}

{{THIS_DIR}}_install: $({{THIS_DIR}}_TARGETS_TO_INSTALL)

{{THIS_DIR}}_uninstall: {{PATH_FROM_TOP}}
	$(UINST_CMD) $({{THIS_DIR}}_TARGETS_TO_INSTALL)

# include all dependency files if not cleaning
ifneq "$(MAKECMDGOALS)" "clean"
-include $(DEPS_{{THIS_DIR}})
endif
