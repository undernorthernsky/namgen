# This file was generated from 'build.rules' using namgen; do not edit!

# the directory with the top-level makefile
# FIXME: deprecated, going obsolete & not used; should be set once in 'make.conf'
TOP_DIR := {{TOP_DIR}}

# relative path from top-dir to this directory
{{THIS_DIR}}_DIR := {{PATH_FROM_TOP}}

# all generated .d dependency files in this directory
DEPS_{{THIS_DIR}} =

# clean target for this sub-dir
{{THIS_DIR}}_clean:
	rm -f $({{THIS_DIR}}_TARGETS)
	(cd {{PATH_FROM_TOP}} && rm -rf $(FILES_TO_CLEAN)) {{EXTRA_CLEAN}}
{{#HAS_VERBATIM}}
# makefile fragment copied verbatim from build.rules
{{VERBATIM}}{{/HAS_VERBATIM}}{{#PROGRAM_RULES}}
# *** program: {{TARGET_NAME}} ***
{{>src_depends}}
{{PATH_FROM_TOP}}/{{TARGET_NAME}}$(EXE_EXT): LF_TGT := {{TARGET_SPECIFIC_LF}}
EXTRA_OBJ_{{THIS_DIR}}_{{TARGET_NAME}} := {{EXTRA_OBJ_EXPR}}

# dependencies of this program
# this statement causes linking with the requested libaries
# defaults to using the shared-lib (if available)
{{#DEPENDS_SHARED}}{{THIS_DIR}}_{{TARGET_NAME}}_LIBS += {{DEPENDENCY}}.la
{{/DEPENDS_SHARED}}

{{#DEPENDS_STATIC}}{{THIS_DIR}}_{{TARGET_NAME}}_STATIC_LIBS += {{DEPENDENCY}}.la
{{/DEPENDS_STATIC}}

{{THIS_DIR}}_{{TARGET_NAME}}_ALL_LIBS = $({{THIS_DIR}}_{{TARGET_NAME}}_LIBS) $({{THIS_DIR}}_{{TARGET_NAME}}_STATIC_LIBS)

# add this program to the global 'make build' goals
TARGETS_TO_BUILD += {{PATH_FROM_TOP}}/{{TARGET_NAME}}$(EXE_EXT)
{{THIS_DIR}}_TARGETS += {{PATH_FROM_TOP}}/{{TARGET_NAME}}$(EXE_EXT)
# prevent 'No such file or directory' bug if install-dir does not exist
{{PATH_FROM_TOP}}/{{TARGET_NAME}}$(EXE_EXT): | $(DESTDIR)/{{DEST_SUB}}/ $(DESTDIR)/lib
# order-only prerequisites when depending on shared libs
{{PATH_FROM_TOP}}/{{TARGET_NAME}}$(EXE_EXT): | $({{THIS_DIR}}_{{TARGET_NAME}}_LIBS)
# link the program from the object files
{{PATH_FROM_TOP}}/{{TARGET_NAME}}$(EXE_EXT): $({{THIS_DIR}}_{{TARGET_NAME}}_STATIC_LIBS) $(OBJ_{{THIS_DIR}}_{{TARGET_NAME}}) $(EXTRA_OBJ_{{THIS_DIR}}_{{TARGET_NAME}})
	@$({{LINK_CMD}}) -o $@ $(OBJ_{{THIS_DIR}}_{{TARGET_NAME}}) $(EXTRA_OBJ_{{THIS_DIR}}_{{TARGET_NAME}}) $({{THIS_DIR}}_{{TARGET_NAME}}_ALL_LIBS) $(BIN_LINK_FLAGS) $(LDFLAGS) $(LF_TGT)

# should this program be installed into DESTDIR?
{{#IF_INSTALL}}$(DESTDIR)/{{DEST_SUB}}/{{TARGET_NAME}}$(EXE_EXT): {{PATH_FROM_TOP}}/{{TARGET_NAME}}$(EXE_EXT)
	$(INSTALL_CMD) $< $(DESTDIR)/{{DEST_SUB}}

# add this program to the 'install' goals for this directory
{{THIS_DIR}}_TARGETS_TO_INSTALL += $(DESTDIR)/{{DEST_SUB}}/{{TARGET_NAME}}$(EXE_EXT)

{{/IF_INSTALL}}{{/PROGRAM_RULES}}
{{#LIBRARY_RULES}}
# *** library: {{TARGET_NAME}} ***
{{>src_depends}}
{{PATH_FROM_TOP}}/{{TARGET_NAME}}.la: LF_TGT := {{TARGET_SPECIFIC_LF}} {{VERSION_SCHEMA}} {{VERSION_NUMBER}}
EXTRA_OBJ_{{THIS_DIR}}_{{TARGET_NAME}} := {{EXTRA_OBJ_EXPR}}
EXTRA_OBJ_LO_{{THIS_DIR}}_{{TARGET_NAME}} := $(EXTRA_OBJ_{{THIS_DIR}}_{{TARGET_NAME}}:%.o=%.lo)

LINK_FLAGS_{{TARGET_NAME}} := {{STATIC_OR_SHARED}}

# dependencies
{{#DEPENDS_SHARED}}{{THIS_DIR}}_{{TARGET_NAME}}_LIBS += {{DEPENDENCY}}.la
{{/DEPENDS_SHARED}}

{{#DEPENDS_STATIC}}{{THIS_DIR}}_{{TARGET_NAME}}_STATIC_LIBS += {{DEPENDENCY}}.la
{{/DEPENDS_STATIC}}

{{THIS_DIR}}_{{TARGET_NAME}}_ALL_LIBS = $({{THIS_DIR}}_{{TARGET_NAME}}_LIBS) $({{THIS_DIR}}_{{TARGET_NAME}}_STATIC_LIBS)

TARGETS_TO_BUILD += {{PATH_FROM_TOP}}/{{TARGET_NAME}}.la
{{THIS_DIR}}_TARGETS += {{PATH_FROM_TOP}}/{{TARGET_NAME}}.la
# prevent 'No such file or directory' bug if install-dir does not exist
{{PATH_FROM_TOP}}/{{TARGET_NAME}}.la: | $(DESTDIR)/{{DEST_SUB}}/ $(DESTDIR)/lib
# order-only prerequisites when depending on shared libs
{{PATH_FROM_TOP}}/{{TARGET_NAME}}.la: | $({{THIS_DIR}}_{{TARGET_NAME}}_LIBS)
{{PATH_FROM_TOP}}/{{TARGET_NAME}}.la: $({{THIS_DIR}}_{{TARGET_NAME}}_STATIC_LIBS) $(OBJ_LO_{{THIS_DIR}}_{{TARGET_NAME}}) $(EXTRA_OBJ_LO_{{THIS_DIR}}_{{TARGET_NAME}})
	@$({{LINK_CMD}}) -o $@ $(OBJ_LO_{{THIS_DIR}}_{{TARGET_NAME}}) $(EXTRA_OBJ_LO_{{THIS_DIR}}_{{TARGET_NAME}}) $({{THIS_DIR}}_{{TARGET_NAME}}_ALL_LIBS) $(LINK_FLAGS_{{TARGET_NAME}}) $(LDFLAGS) $(LF_TGT)

{{#DEPENDS_STATIC}}{{PATH_FROM_TOP}}/{{TARGET_NAME}}.la: {{DEPENDENCY}}.la
{{/DEPENDS_STATIC}}

{{#IF_INSTALL}}# install into DESTDIR
$(DESTDIR)/{{DEST_SUB}}/{{TARGET_NAME}}.la: {{PATH_FROM_TOP}}/{{TARGET_NAME}}.la
	$(INSTALL_CMD) $< $(DESTDIR)/{{DEST_SUB}}

{{THIS_DIR}}_TARGETS_TO_INSTALL += $(DESTDIR)/{{DEST_SUB}}/{{TARGET_NAME}}.la
{{/IF_INSTALL}}{{/LIBRARY_RULES}}
{{#CMI_RULES}}
# build external: {{TARGET_NAME}}

SRC_{{THIS_DIR}}_{{TARGET_NAME}} := {{SRC_EXPR}}
EXPLODED_{{THIS_DIR}}_{{TARGET_NAME}} := {{PATH_FROM_TOP}}/{{EXTRACTED_DIRNAME}}
PATCHES_{{THIS_DIR}}_{{TARGET_NAME}}  := $(abspath {{LIST_OF_PATCHES}})
{{#DEPENDS}}{{THIS_DIR}}_{{TARGET_NAME}}_DEP_LIBS += {{DEPENDENCY}}.la
{{/DEPENDS}}

{{PATH_FROM_TOP}}/{{TARGET_NAME}}.la: $(SRC_{{THIS_DIR}}_{{TARGET_NAME}}) | $(STAGEDIR) $({{THIS_DIR}}_{{TARGET_NAME}}_DEP_LIBS)
	@echo "[extern] {{TARGET_NAME}}"
	@tar -C {{PATH_FROM_TOP}} -axf $(SRC_{{THIS_DIR}}_{{TARGET_NAME}})
	@if [ -n "$(PATCHES_{{THIS_DIR}}_{{TARGET_NAME}})" ]; then \
        (cd $(EXPLODED_{{THIS_DIR}}_{{TARGET_NAME}}) && cat $(PATCHES_{{THIS_DIR}}_{{TARGET_NAME}}) | patch -p 1); fi
	@( cd $(EXPLODED_{{THIS_DIR}}_{{TARGET_NAME}}) && \
        {{CMD}} ) >{{PATH_FROM_TOP}}/{{TARGET_NAME}}-build.log 2>&1
	@rm -rf $(EXPLODED_{{THIS_DIR}}_{{TARGET_NAME}})
	@if [ -e $(STAGEDIR)/lib/{{TARGET_NAME}}.la ]; then cp $(STAGEDIR)/lib/{{TARGET_NAME}}.la $@; else touch $@; fi
{{/CMI_RULES}}

{{THIS_DIR}}_build: $({{THIS_DIR}}_TARGETS)

{{THIS_DIR}}_install: $({{THIS_DIR}}_TARGETS_TO_INSTALL)

{{THIS_DIR}}_uninstall: {{PATH_FROM_TOP}}
	$(UINST_CMD) $({{THIS_DIR}}_TARGETS_TO_INSTALL)

# include all dependency files if not cleaning
ifneq "$(MAKECMDGOALS)" "clean"
ifneq "$(DEPS_{{THIS_DIR}})" ""
-include $(DEPS_{{THIS_DIR}})
endif
endif
